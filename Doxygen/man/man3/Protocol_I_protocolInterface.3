.TH "Protocol::I_protocolInterface" 3 "Wed Apr 3 2019" "Version 0.1" "Protocol Developer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Protocol::I_protocolInterface \- Base Protocol interface\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <I_protocolInterface\&.h>\fP
.PP
Inherits \fBPluginLoader::I_Plugin\fP\&.
.PP
Inherited by \fBhwProt::HelloWorldProtocol\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~I_protocolInterface\fP ()=default"
.br
.RI "Destructor\&. "
.ti -1c
.RI "virtual const char * \fBgetPluginName\fP ()=0"
.br
.RI "Returns the plugins name\&. "
.ti -1c
.RI "virtual const char * \fBgetPluginVersion\fP ()=0"
.br
.RI "Returns the version of the plugin\&. "
.ti -1c
.RI "virtual \fBPluginLoader::PLUGINTYPE_t\fP \fBgetPluginType\fP ()=0"
.br
.RI "Returns the plugin \fItype\fP "
.ti -1c
.RI "virtual void \fBDecodeResult\fP (std::shared_ptr< \fBDataStruct\fP > payLoad)=0"
.br
.RI "Decodes the data returned from the target\&. "
.ti -1c
.RI "virtual std::shared_ptr< \fBDataStruct\fP > \fBGetDataToSend\fP ()=0"
.br
.RI "Builds a packet to send BACK to the target based on what was received\&. "
.ti -1c
.RI "virtual std::shared_ptr< \fBDataStruct\fP > \fBGetResult\fP ()=0"
.br
.RI "The final result of the returned data\&. "
.ti -1c
.RI "virtual int \fBGetResultCode\fP ()=0"
.br
.RI "The result code returned/calculated\&. "
.ti -1c
.RI "virtual void \fBSetDataPoints\fP (\fBtestAnalyser2::dataPoint\fP testDP)=0"
.br
.RI "Sets the protocols datapoints\&. "
.in -1c
.SH "Detailed Description"
.PP 
Base Protocol interface\&. 
.PP
Definition at line 42 of file I_protocolInterface\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void Protocol::I_protocolInterface::DecodeResult (std::shared_ptr< \fBDataStruct\fP > payLoad)\fC [pure virtual]\fP"

.PP
Decodes the data returned from the target\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpayLoad\fP The payload received from the target 
.RE
.PP

.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.
.SS "virtual std::shared_ptr<\fBDataStruct\fP> Protocol::I_protocolInterface::GetDataToSend ()\fC [pure virtual]\fP"

.PP
Builds a packet to send BACK to the target based on what was received\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer to a struct of data and sizes 
.RE
.PP

.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.
.SS "virtual const char* Protocol::I_protocolInterface::getPluginName ()\fC [pure virtual]\fP"

.PP
Returns the plugins name\&. 
.PP
\fBReturns:\fP
.RS 4
The name of the plugin (as a const char*) 
.RE
.PP

.PP
Implements \fBPluginLoader::I_Plugin\fP\&.
.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.
.SS "virtual \fBPluginLoader::PLUGINTYPE_t\fP Protocol::I_protocolInterface::getPluginType ()\fC [pure virtual]\fP"

.PP
Returns the plugin \fItype\fP 
.PP
\fBReturns:\fP
.RS 4
The the plugin is (as an enum) 
.RE
.PP

.PP
Implements \fBPluginLoader::I_Plugin\fP\&.
.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.
.SS "virtual const char* Protocol::I_protocolInterface::getPluginVersion ()\fC [pure virtual]\fP"

.PP
Returns the version of the plugin\&. 
.PP
\fBReturns:\fP
.RS 4
The plugin version 
.RE
.PP

.PP
Implements \fBPluginLoader::I_Plugin\fP\&.
.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.
.SS "virtual std::shared_ptr<\fBDataStruct\fP> Protocol::I_protocolInterface::GetResult ()\fC [pure virtual]\fP"

.PP
The final result of the returned data\&. 
.PP
\fBReturns:\fP
.RS 4
The returned data 
.RE
.PP

.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.
.SS "virtual int Protocol::I_protocolInterface::GetResultCode ()\fC [pure virtual]\fP"

.PP
The result code returned/calculated\&. 
.PP
\fBReturns:\fP
.RS 4
Result code 
.RE
.PP

.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.
.SS "virtual void Protocol::I_protocolInterface::SetDataPoints (\fBtestAnalyser2::dataPoint\fP testDP)\fC [pure virtual]\fP"

.PP
Sets the protocols datapoints\&. 
.PP
\fBParameters:\fP
.RS 4
\fItestDP\fP The datapoints we're using 
.RE
.PP

.PP
Implemented in \fBhwProt::HelloWorldProtocol\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Protocol Developer from the source code\&.
