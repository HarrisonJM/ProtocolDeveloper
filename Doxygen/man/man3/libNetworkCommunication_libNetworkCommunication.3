.TH "libNetworkCommunication::libNetworkCommunication" 3 "Wed Apr 3 2019" "Version 0.1" "Protocol Developer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libNetworkCommunication::libNetworkCommunication \- The NetworkCommunication class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <libNetworkCommunication\&.h>\fP
.PP
Inherits \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBlibNetworkCommunication\fP ()"
.br
.RI "Default Constructor\&. "
.ti -1c
.RI "\fBlibNetworkCommunication\fP (std::shared_ptr< \fBcFunctions::I_cNetComm\fP > iOInterface)"
.br
.RI "Contructor, mainly used for testing\&. "
.ti -1c
.RI "\fB~libNetworkCommunication\fP () override=default"
.br
.RI "Default destructor\&. "
.ti -1c
.RI "virtual const char * \fBgetPluginName\fP () override"
.br
.RI "Returns the plugins name\&. "
.ti -1c
.RI "virtual const char * \fBgetPluginVersion\fP () override"
.br
.RI "Returns the version of the plugin\&. "
.ti -1c
.RI "virtual \fBPluginLoader::PLUGINTYPE_t\fP \fBgetPluginType\fP () override"
.br
.RI "Returns the plugin \fItype\fP "
.ti -1c
.RI "ssize_t \fBSendData\fP (void *payLoad_p, size_t size) override"
.br
.RI "Sends data\&. "
.ti -1c
.RI "ssize_t \fBReceiveData\fP (void *payLoad_p, size_t size) override"
.br
.RI "Recevies Data\&. "
.ti -1c
.RI "bool \fBEstablishConnection\fP () override"
.br
.RI "Establishes a connection with the remote\&. "
.ti -1c
.RI "void \fBDisconnect\fP () override"
.br
.RI "Disconnects from the target\&. "
.ti -1c
.RI "void \fBSetPortToSendTo\fP (int port) override"
.br
.RI "Sets the port we wish to send on\&. "
.ti -1c
.RI "void \fBSetDestinationAddress\fP (char *destinationAddress) override"
.br
.RI "Set the destination's address\&. "
.ti -1c
.RI "void \fBSetTCPOrUDP\fP (int tcpOrUDP) override"
.br
.RI "Set whether TCP or UDP\&. "
.ti -1c
.RI "void \fBSetServInfo\fP (addrinfo *_servinfo) override"
.br
.RI "Supply extra information for connecting to a server\&. "
.ti -1c
.RI "void \fBSetInterface\fP (std::shared_ptr< \fBcFunctions::I_cNetComm\fP > iOInterface) override"
.br
.RI "The Interface we want to connect over\&. "
.in -1c
.SH "Detailed Description"
.PP 
The NetworkCommunication class\&. 
.PP
Definition at line 30 of file libNetworkCommunication\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libNetworkCommunication::libNetworkCommunication::libNetworkCommunication ()"

.PP
Default Constructor\&. Constructor\&. 
.PP
Definition at line 28 of file libNetworkCommunication\&.cpp\&.
.SS "libNetworkCommunication::libNetworkCommunication::libNetworkCommunication (std::shared_ptr< \fBcFunctions::I_cNetComm\fP > iOInterface)\fC [explicit]\fP"

.PP
Contructor, mainly used for testing\&. Constrcutor, provides an iOInterface set\&.
.PP
\fBParameters:\fP
.RS 4
\fIiOInterface\fP Sets the interface we want to use
.br
\fIiOInterface\fP The iOFunctions we'd like to use (put through an I_cNetComm interface\&. Only used for testing purposes) 
.RE
.PP

.PP
Definition at line 43 of file libNetworkCommunication\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void libNetworkCommunication::libNetworkCommunication::Disconnect ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Disconnects from the target\&. Disconnects form the remote\&.
.PP
\fBReturns:\fP
.RS 4
None 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 132 of file libNetworkCommunication\&.cpp\&.
.SS "bool libNetworkCommunication::libNetworkCommunication::EstablishConnection ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Establishes a connection with the remote\&. 
.PP
\fBReturns:\fP
.RS 4
true for success, otherwise false
.PP
True on success, otherwise false 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 120 of file libNetworkCommunication\&.cpp\&.
.SS "const char * libNetworkCommunication::libNetworkCommunication::getPluginName ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Returns the plugins name\&. 
.PP
\fBReturns:\fP
.RS 4
The name of the plugin (as a const char*) 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 56 of file libNetworkCommunication\&.cpp\&.
.SS "\fBPluginLoader::PLUGINTYPE_t\fP libNetworkCommunication::libNetworkCommunication::getPluginType ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Returns the plugin \fItype\fP 
.PP
\fBReturns:\fP
.RS 4
The the plugin is (as an enum) 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 72 of file libNetworkCommunication\&.cpp\&.
.SS "const char * libNetworkCommunication::libNetworkCommunication::getPluginVersion ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Returns the version of the plugin\&. 
.PP
\fBReturns:\fP
.RS 4
The plugin version 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 64 of file libNetworkCommunication\&.cpp\&.
.SS "ssize_t libNetworkCommunication::libNetworkCommunication::ReceiveData (void * payLoad_p, size_t size)\fC [override]\fP, \fC [virtual]\fP"

.PP
Recevies Data\&. Receives data ready to pass be processed\&.
.PP
\fBParameters:\fP
.RS 4
\fIpayLoad_p\fP Where to store the data we've recevied 
.br
\fIsize\fP The size of the payload buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
The size of the data received
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpayLoad_p\fP A pointer to where to store the data 
.br
\fIsize\fP The size of the received data 
.RE
.PP
\fBReturns:\fP
.RS 4
None 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 102 of file libNetworkCommunication\&.cpp\&.
.SS "ssize_t libNetworkCommunication::libNetworkCommunication::SendData (void * payLoad_p, size_t size)\fC [override]\fP, \fC [virtual]\fP"

.PP
Sends data\&. Sends the provided data on the socket\&.
.PP
\fBParameters:\fP
.RS 4
\fIpayLoad_p\fP The data we wish to send 
.br
\fIsize\fP The size of the data 
.RE
.PP
\fBReturns:\fP
.RS 4
The size of the data sent
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpayLoad_p\fP A pointer to the information we want to send 
.br
\fIsize\fP The size of the information we want to send 
.RE
.PP
\fBReturns:\fP
.RS 4
True on success, otherwise false 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 82 of file libNetworkCommunication\&.cpp\&.
.SS "void libNetworkCommunication::libNetworkCommunication::SetDestinationAddress (char * destinationAddress)\fC [override]\fP, \fC [virtual]\fP"

.PP
Set the destination's address\&. Sets the destination address we wish to send to\&.
.PP
\fBParameters:\fP
.RS 4
\fIdestinationAddress\fP The address we wish to send to
.br
\fIdestinationAddress\fP The destionation address we wisht o send to 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 148 of file libNetworkCommunication\&.cpp\&.
.SS "void libNetworkCommunication::libNetworkCommunication::SetInterface (std::shared_ptr< \fBcFunctions::I_cNetComm\fP > iOInterface)\fC [override]\fP, \fC [virtual]\fP"

.PP
The Interface we want to connect over\&. Sets the interface we'll be using to communicate with\&.
.PP
\fBParameters:\fP
.RS 4
\fIiOInterface\fP A shared_ptr containing the concrete implementation we wish to use
.br
\fIiOInterface\fP A shared_ptr to the interface we'll be using
.RE
.PP
\fBReturns:\fP
.RS 4
None 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 174 of file libNetworkCommunication\&.cpp\&.
.SS "void libNetworkCommunication::libNetworkCommunication::SetPortToSendTo (int port)\fC [override]\fP, \fC [virtual]\fP"

.PP
Sets the port we wish to send on\&. Sets the port we wish to send to\&.
.PP
\fBParameters:\fP
.RS 4
\fIport\fP The port we wish to send on
.br
\fIport\fP The port we wish to send to 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 140 of file libNetworkCommunication\&.cpp\&.
.SS "void libNetworkCommunication::libNetworkCommunication::SetServInfo (addrinfo * _servinfo)\fC [override]\fP, \fC [virtual]\fP"

.PP
Supply extra information for connecting to a server\&. Sets additional server info with the addrinfo struct\&.
.PP
\fBParameters:\fP
.RS 4
\fI_servinfo\fP A pointer to the address info we wish to use
.br
\fI_servinfo\fP The additional server info 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 164 of file libNetworkCommunication\&.cpp\&.
.SS "void libNetworkCommunication::libNetworkCommunication::SetTCPOrUDP (int tcpOrUDP)\fC [override]\fP, \fC [virtual]\fP"

.PP
Set whether TCP or UDP\&. Sets whether we are a TCP or UDP connection\&.
.PP
\fBParameters:\fP
.RS 4
\fItcpOrUDP\fP 1 for TCP, 0 for UDP
.br
\fItcpOrUDP\fP 1 for TCP 0 for UDP 
.RE
.PP

.PP
Implements \fBlibNetworkCommunication::I_libNetworkCommunication\fP\&.
.PP
Definition at line 156 of file libNetworkCommunication\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Protocol Developer from the source code\&.
