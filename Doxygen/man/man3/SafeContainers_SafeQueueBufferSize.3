.TH "SafeContainers::SafeQueueBufferSize< T >" 3 "Wed Apr 3 2019" "Version 0.1" "Protocol Developer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SafeContainers::SafeQueueBufferSize< T > \- \fBSafeQueueBufferSize\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SafeQueueBufferSize\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSafeQueueBufferSize\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBSafeQueueBufferSize\fP (size_t in_MaxBuff)"
.br
.RI "Buffer Size Constructor\&. "
.ti -1c
.RI "virtual \fB~SafeQueue\fP ()"
.br
.RI "Default destructor\&. "
.ti -1c
.RI "virtual bool \fBpush\fP (T &newElement)"
.br
.RI "push "
.ti -1c
.RI "virtual T \fBpop_front\fP ()"
.br
.RI "pop_front "
.ti -1c
.RI "template<class\&.\&.\&. Args> void \fBemplace\fP (Args &&\&.\&.\&. args)"
.br
.RI "Creates a class in place and places at the back of the queue\&. "
.ti -1c
.RI "virtual T \fBfront\fP ()"
.br
.RI "front "
.ti -1c
.RI "virtual T \fBback\fP ()"
.br
.RI "back "
.ti -1c
.RI "virtual bool \fBempty\fP ()"
.br
.RI "empty "
.ti -1c
.RI "virtual size_t \fBsize\fP ()"
.br
.RI "Returns the number of elements in the queue\&. "
.ti -1c
.RI "virtual size_t \fBrealSize\fP ()"
.br
.RI "Returns the size of the queue in bytes\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T>
.br
class SafeContainers::SafeQueueBufferSize< T >"
\fBSafeQueueBufferSize\fP\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP The type of object it'll be storing 
.RE
.PP

.PP
Definition at line 24 of file SafeQueueBufferSize\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class T > \fBSafeContainers::SafeQueueBufferSize\fP< T >::\fBSafeQueueBufferSize\fP ()\fC [inline]\fP"

.PP
Default constructor\&. Default constructor\&. Assigns a 16k buffer to the queue 
.PP
Definition at line 32 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > \fBSafeContainers::SafeQueueBufferSize\fP< T >::\fBSafeQueueBufferSize\fP (size_t in_MaxBuff)\fC [inline]\fP"

.PP
Buffer Size Constructor\&. Assigns the maximum buffer size to whatever is passed
.PP
\fBParameters:\fP
.RS 4
\fIin_MaxBuff\fP The maximum size (in bytes) that the logs buffer can be 
.RE
.PP

.PP
Definition at line 48 of file SafeQueueBufferSize\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<class T > virtual T \fBSafeContainers::SafeQueueBufferSize\fP< T >::back ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
back Returns a copy of the last element of the queue
.PP
\fBReturns:\fP
.RS 4
a copy of the last element of the queue 
.RE
.PP

.PP
Definition at line 158 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > template<class\&.\&.\&. Args> void \fBSafeContainers::SafeQueueBufferSize\fP< T >::emplace (Args &&\&.\&.\&. args)\fC [inline]\fP"

.PP
Creates a class in place and places at the back of the queue\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIArgs\fP Move type? 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP Args with which to build the thing? 
.RE
.PP
\fBReturns:\fP
.RS 4
None 
.RE
.PP

.PP
Definition at line 127 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > virtual bool \fBSafeContainers::SafeQueueBufferSize\fP< T >::empty ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
empty Checks to see if the queue is empty, returning true or false, dependent
.PP
\fBReturns:\fP
.RS 4
true if queue is full 
.RE
.PP

.PP
Definition at line 172 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > virtual T \fBSafeContainers::SafeQueueBufferSize\fP< T >::front ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
front Returns a copy of the front element of the queue
.PP
\fBReturns:\fP
.RS 4
A copy of the element at the front of the queue 
.RE
.PP

.PP
Definition at line 144 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > virtual T \fBSafeContainers::SafeQueueBufferSize\fP< T >::pop_front ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
pop_front Returns the element from the front of the queue and removes it
.PP
\fBReturns:\fP
.RS 4
Returns the value from the front of the queue 
.RE
.PP

.PP
Definition at line 101 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > virtual bool \fBSafeContainers::SafeQueueBufferSize\fP< T >::push (T & newElement)\fC [inline]\fP, \fC [virtual]\fP"

.PP
push Pushes a new element to the back of the queue
.PP
\fBParameters:\fP
.RS 4
\fInewElement\fP A reference containing what is to be written to queue
.RE
.PP
\fBReturns:\fP
.RS 4
ture if successfully added to the queue, otherwise false 
.RE
.PP

.PP
Definition at line 81 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > virtual size_t \fBSafeContainers::SafeQueueBufferSize\fP< T >::realSize ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Returns the size of the queue in bytes\&. 
.PP
\fBReturns:\fP
.RS 4
The number of elements in the queue 
.RE
.PP

.PP
Definition at line 197 of file SafeQueueBufferSize\&.h\&.
.SS "template<class T > virtual size_t \fBSafeContainers::SafeQueueBufferSize\fP< T >::size ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Returns the number of elements in the queue\&. 
.PP
\fBReturns:\fP
.RS 4
The number of elements int he queue 
.RE
.PP

.PP
Definition at line 185 of file SafeQueueBufferSize\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Protocol Developer from the source code\&.
