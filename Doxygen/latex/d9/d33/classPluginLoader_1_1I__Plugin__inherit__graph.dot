digraph "PluginLoader::I_Plugin"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{PluginLoader::I_Plugin\n||+ ~I_Plugin()\l+ getPluginName()\l+ getPluginVersion()\l+ getPluginType()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Top-level base class the plugin interfaces should derive from."];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node1 [label="{Communication::I_communication\n||+ ~I_communication()\l+ SendData()\l+ ReceiveData()\l+ EstablishConnection()\l+ Disconnect()\l+ getPluginName()\l+ getPluginVersion()\l+ getPluginType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/ddb/classCommunication_1_1I__communication.html",tooltip="Defines the interface for listening."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{libNetworkCommunication\l::I_libNetworkCommunication\n||+ ~I_libNetworkCommunication()\l+ getPluginName()\l+ getPluginVersion()\l+ getPluginType()\l+ SendData()\l+ ReceiveData()\l+ EstablishConnection()\l+ Disconnect()\l+ SetPortToSendTo()\l+ SetDestinationAddress()\l+ SetTCPOrUDP()\l+ SetServInfo()\l+ SetInterface()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d80/classlibNetworkCommunication_1_1I__libNetworkCommunication.html",tooltip="The NetworkCommunication class."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{libNetworkCommunication\l::libNetworkCommunication\n||+ libNetworkCommunication()\l+ libNetworkCommunication()\l+ ~libNetworkCommunication()\l+ getPluginName()\l+ getPluginVersion()\l+ getPluginType()\l+ SendData()\l+ ReceiveData()\l+ EstablishConnection()\l+ Disconnect()\l+ SetPortToSendTo()\l+ SetDestinationAddress()\l+ SetTCPOrUDP()\l+ SetServInfo()\l+ SetInterface()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dfa/classlibNetworkCommunication_1_1libNetworkCommunication.html",tooltip="The NetworkCommunication class."];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{Protocol::I_protocolInterface\n||+ ~I_protocolInterface()\l+ getPluginName()\l+ getPluginVersion()\l+ getPluginType()\l+ DecodeResult()\l+ GetDataToSend()\l+ GetResult()\l+ GetResultCode()\l+ SetDataPoints()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d19/classProtocol_1_1I__protocolInterface.html",tooltip="Base Protocol interface."];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{hwProt::HelloWorldProtocol\n||+ HelloWorldProtocol()\l+ ~HelloWorldProtocol()\l+ getPluginName()\l+ getPluginVersion()\l+ getPluginType()\l+ DecodeResult()\l+ GetDataToSend()\l+ GetResult()\l+ GetResultCode()\l+ SetDataPoints()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d75/classhwProt_1_1HelloWorldProtocol.html",tooltip="HelloWorldProtocol."];
}
