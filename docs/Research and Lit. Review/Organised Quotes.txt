What is the thing
	-- Load testing is vital to proving that web services meet the demands of its users, both in traffic and bheaviour (Draheim et al 2006)
	-- Helps to locate issues in the code that might not appear under smaller load. These are errors are called "Load sensitive". (Bayan and Cangussu, 2006)
		
	-- The rate at which transactions are conducted constitutes load. Sending this to a target for test purposes, constitutes a Load Test. (Bayan and Cangussu, 2006)
	-- Stress Testing is similair to workload, however the express intention is to break the system, and to verify how it recovers. (Bayan and Cangussu, 2006)

	-- Workload (characteristics and intensity), environment and , high-level metrics define a load test and its results (Malik, 2010).
	-- Intensity refers to arrival rate and throuput of data (Malik, 2010).
	-- All of these come together in a test report (Malik, 2010).

	-- Simluating the internet proper is near impossible, due to its shear scale, impracticality and the number of nodes needed (Sumeet Kumar and Kathleen 2017).	

	-- It is certainly possible to create software that facilitates the entire load testing process. And to make the results it obtains far more accurate (Yan et al, 2014).
	
Other programs

	- Mercury Interactive Continues to Dominate as Worldwide Load Testing Market Leader; Company Captures 63% of Web Load Testing Market; Leads Market for Hosted Load Testing Services
	-- Current tools support simple test cases with a fixed sequence of actions (Draheim et al 2006)
	-- Mercury Interactive's LoadRunner current load testing leader (Draheim et al 2006)
	-- Current software are only client-server models (Bhatia et al, 2014)
	-- Limited number of scenarios (Bhatia et al, 2014)	
	-- DITG, Harpoon, fudp, 2Hping and, curlLoader are currently available open source traffic generators (Bhatia et al, 2014)
	-- Curlloader is relatively flexible in its use (Bhatia et al, 2014)

	-- LoadUI, ApacheJmeter IBM Rational Performance Tester (Yan et al, 2014)
	-- Testmaker is another WS load tester that allows concurrency testing on Amazon EC2 (Yan et al, 2014).

	-- SURGE calculates how a user might interact with a website based on what's on each page (Hasenleithner and Ziegler, 2003)

Problem Identification
	-- Tests often need to be parameterised and modified (Draheim et al 2006)
	-- Often hard to do (Draheim et al 2006)
	-- More advanced tools are needed (Draheim et al 2006)
	-- Load test analysis methodology has been performed before (Malik, 2010)
	-- Models can even be machine generated based on behaviour observation (Bayan and Cangussu, 2006).

	-- As software shifts towards being offered "as a service" (-aas). Offering some sort of load tester as a service would be wise, and allow for future proofing (Yan et al, 2014).	
	-- A Load tester will likely contain four major components: Test Receiver, Test Manager, Middleware Manager and a Test Runner (Yan et al, 2014).
	-- Test Receiver: Receives tests to run from the tester, can also monitor tests (Yan et al, 2014).
	-- Test Manager: Manages queues fo tests and dispatches them, gathering and merging test results (Yan et al, 2014).
	
	-- Test Runner: Invokes the tests. Also analyses validity of results (Yan et al, 2014). 
	-- Middleware Manager: provides and amanges testrunners for use within the system (Yan et al, 2014)

	- FIG2 (Yan et al, 2014)
	
Use Cases

	-- Artificial traffic generation is often the only practical way to really verify the running of a service (Bhatia et al, 2014).
	-- Hardware traffic generation often leads to greater packet drop at the target (Bhatia et al, 2014)
	-- Hardware is faster but also comes at a greater cost (Bhatia et al, 2014)
	-- Generating precise traffic allows greater control (Bhatia et al, 2014)
	
How should it be done
	-- Load testing should be performed regularly to make sure that resources are correctly provisioned. (Draheim et al 2006)

	-- Different Modes need to be offered for proper testing. Static, step and maximal testing are three such methods. Static runs for a specific load. 
	Step runs for measuring usability under a load span. Maximal load to determine upper limits. (Yan et al, 2014)

Requirements and Design
	-- Real user data can (and should) be used to model traffic. However such models are less versatile than stochastic ones. (Draheim et al 2006)
	-- Script driven approches are common, but visual editors massively increase usability.
	Realistic Load Testing of Web Applications (Draheim et al 2006)

	-- Reconfigurability for a variety of connections. Low cost, low resource would be a signifcant boon, however using the resources as efficiently as possible is key.
	Traffic load co-ordination would also help to improve results and efficency. Traffic aggregation would also be beneficial to make sure all traffic acts on a single interface at the target.	Monitoring the traffic is also a good feature to have. (Bhatia et al, 2014)

	-- Another structure would involve: Input identification, controller tuning and a controller. 
	Input Identification involves finding inputs that affect the resource of interest.
	Controller tuning involves figuroing out the internal parameters of the chosen controller
	The controller itself drives the testcases to what load level is wanted. (Bayan and Cangussu, 2006)

	- [Fig 1] looks good. Lift it.
	Modelling form-based interfaces with bipartite state machines
	(Draheima and Weber, 2005)

	-- Pseudo random generators are very good for the purposes of this program (Akhshani et al 2017).

	-- The algorithm for constructing a random number generator based on quantum chaotic maps can also be used to create a good chaos model from which to work. 
	Only using user activity graphs instead, to better try to model peak times. (Akhshani et al 2017)

	-- User interaction can be modelled as a bipartite state transition diagram (Draheim et al 2006)
	
	-- Geographically distributed instances would improve the results per test task (Yan et al, 2014).
	-- Large amounts of concurrency within each instance would be good as the loads can be very large, and the taffic could be very high (Yan et al, 2014).

	-------------(This needs working on a bit later)------------------
	- FORMULA 1 (SEE FORMULA1.PNG) for ACTTN Available concurrent test thread number
	  Oi refers to the upper bound of the original concurrent test threads number of node i. Let t1
	be the average response time (ART) which is calculated by non-concurrently (with just 1 test
	thread) invoking the 20 most used Web services in ServiceXchange from node i . And let t2
	be the ART while concurrently invoking each of those 20 Web services with R requests. R is
	initially set as 2 and increased step by step while t2 < 2t1, in which process t2 would increase
	as R increases and finally reach 2t1. We set the value of Oi as R when t2 D 2t1 according to the
	value of delay variance factor in computing retransmission timeout in RFC 793 [18] because
	when retransmission is detected, we can decide that a network congestion is happening;
	 S are the number of types of other SA hosted in each node;
	 Cij stands for the number of the jth type of SA on node i . In Service4All, every node may host
	several types of SAs at the same time and each type of SA will consume a certain amount of
	node resources. Thus, we need to take this factor into account when calculating the ACTTN;
	 j is the impact factor of the jth type of SA to the ACTTN which is defined as the average
	reduction of Oi when one of the jth SA is added on all the test nodes. For instance, if we
	add a BPMNEngine (with a composite service executing on it) to each node and the average
	reduction of Oi is d, then BPMNEngine is set as d.
	DeliveringWeb service load testing as a service with a global cloud
	Minzhi Yan, Hailong Sun*,†, Xudong Liu, Ting Deng and Xu Wang

	- 
